"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hydrateApi = exports.hydrateContext = exports.hydrate = void 0;
const update_js_1 = require("./data/update.js");
const message_js_1 = require("./data/message.js");
const inline_message_js_1 = require("./data/inline-message.js");
/**
 * Plugin that hydrates the context object and API call results, and equips the
 * objects with useful methods that are calling `bot.api` with values prefilled
 * from the object they are installed on.
 *
 * For example, this plugin allows you to use `await ctx.message.delete()` instead of
 * `await ctx.deleteMessage()`.
 *
 * Check out [the official plugin
 * documentation](https://grammy.dev/plugins/hydrate.html) on the grammY
 * webiste.
 */
function hydrate() {
    const hydrator = hydrateApi();
    return (ctx, next) => {
        ctx.api.config.use(hydrator);
        (0, update_js_1.installUpdateMethods)(ctx.api.raw, ctx.update);
        return next();
    };
}
exports.hydrate = hydrate;
function hydrateContext() {
    return (ctx, next) => {
        (0, update_js_1.installUpdateMethods)(ctx.api.raw, ctx.update);
        return next();
    };
}
exports.hydrateContext = hydrateContext;
function hydrateApi() {
    const t = async (prev, method, payload, signal) => {
        const res = await prev(method, payload, signal);
        if (res.ok) {
            if (isMessage(res.result)) {
                (0, message_js_1.installMessageMethods)(toApi(prev), res.result);
            }
            else if (isInlineMessage(res.result)) {
                (0, inline_message_js_1.installInlineMessageMethods)(toApi(prev), res.result);
            }
            // TODO: hydrate other method call results
        }
        return res;
    };
    return t;
}
exports.hydrateApi = hydrateApi;
function isMessage(obj) {
    return (typeof obj === "object" &&
        obj !== null &&
        "message_id" in obj &&
        "chat" in obj);
}
function isInlineMessage(obj) {
    return (typeof obj === "object" &&
        obj !== null &&
        "inline_message_id" in obj);
}
// TODO: add support for the following methods of these objects
// === USERS
// - get user profile photos
// - ban
// - unban
// - restrict
// - promote
// - set custom title
// - get (private)
// - get in chat (groups)
// === CHATS
// - set permissions
// - get
// - get admins
// - get private chat, get group chat, etc with narrowed return types
// - etc
// - all send message methods?
// - just everything that has a chat_id?
function toApi(connector) {
    return new Proxy({}, {
        get(_, m) {
            return connector.bind(null, m);
        },
    });
}
