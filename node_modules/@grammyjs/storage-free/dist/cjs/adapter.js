"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.freeStorage = void 0;
class Storage {
    constructor(token, rootUrl = 'https://grammy-free-session.deno.dev') {
        Object.defineProperty(this, "token", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: token
        });
        Object.defineProperty(this, "rootUrl", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: rootUrl
        });
        Object.defineProperty(this, "jwt", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    async login() {
        if (this.jwt === undefined) {
            const url = `${this.rootUrl}/login`;
            const body = JSON.stringify({ token: this.token });
            const response = await retryFetch(url, { method: 'POST', body });
            const { token } = await response.json();
            if (typeof token !== 'string') {
                throw new Error('Cannot use free session, invalid bot token!');
            }
            this.jwt = token;
        }
        return this.jwt;
    }
    logout() {
        this.jwt = undefined;
    }
    async call(method, key, body) {
        // perform request
        const url = `${this.rootUrl}/session/${key}`;
        const jwt = await this.login();
        const headers = { 'Authorization': `Bearer ${jwt}` };
        const response = await retryFetch(url, { method, body, headers });
        // handle response
        if (response.status === 401) {
            // token was revoked, must login again
            this.logout();
            return await this.call(method, key, body);
        }
        else if (response.status === 404) {
            // empty session
            return undefined;
        }
        else if (200 <= response.status && response.status < 300) {
            // success
            return method === 'GET' ? await response.text() : undefined;
        }
        else {
            // error
            throw new Error(`${response.status}: ${(await response.json()).error}`);
        }
    }
}
/**
 * @param token The bot token of your bot.
 * @param opts Further configuration options
 * @returns An adapter to grammY's free session storage
 */
function freeStorage(token, opts) {
    const storage = new Storage(token, opts === null || opts === void 0 ? void 0 : opts.rootUrl);
    if ((opts === null || opts === void 0 ? void 0 : opts.jwt) !== undefined)
        storage.jwt = opts.jwt;
    return {
        async read(key) {
            const session = await storage.call('GET', key);
            return session === undefined ? undefined : JSON.parse(session);
        },
        async write(key, data) {
            await storage.call('POST', key, JSON.stringify(data));
        },
        async delete(key) {
            await storage.call('DELETE', key);
        },
        /**
         * Returns the storage authentication token which is used to store the
         * session data. Only useful if you want to avoid the login call that will
         * be performed automatically when the storage adapter contacts its backend
         * for the first time. This can improve startup performance and is
         * especially useful in serverless environments.
         */
        async getToken() {
            return await storage.login();
        },
    };
}
exports.freeStorage = freeStorage;
async function retryFetch(...args) {
    let res;
    do {
        res = await (0, shim_node_js_1.fetch)(...args);
        if (res.status >= 500) {
            console.error(`${res.status} in free session service, retrying!`);
        }
    } while (res.status >= 500);
    return res;
}
const shim_node_js_1 = require("./shim.node.js");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLE1BQU0sT0FBTztJQUVYLFlBQ21CLEtBQWEsRUFDYixVQUFVLHNDQUFzQzs7Ozs7bUJBRGhEOzs7Ozs7bUJBQ0E7O1FBSG5COzs7OztXQUErQjtJQUk1QixDQUFDO0lBRUosS0FBSyxDQUFDLEtBQUs7UUFDVCxJQUFJLElBQUksQ0FBQyxHQUFHLEtBQUssU0FBUyxFQUFFO1lBQzFCLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sUUFBUSxDQUFDO1lBQ3BDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDbkQsTUFBTSxRQUFRLEdBQUcsTUFBTSxVQUFVLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ2pFLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN4QyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtnQkFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO2FBQ2hFO1lBQ0QsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7U0FDbEI7UUFDRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbEIsQ0FBQztJQUVELE1BQU07UUFDSixJQUFJLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQztJQUN2QixDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FDUixNQUFpQyxFQUNqQyxHQUFXLEVBQ1gsSUFBYTtRQUViLGtCQUFrQjtRQUNsQixNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLFlBQVksR0FBRyxFQUFF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